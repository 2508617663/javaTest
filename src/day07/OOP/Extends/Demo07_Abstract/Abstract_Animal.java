package day07.OOP.Extends.Demo07_Abstract;
/*
* 抽象类（abstract）
* 格式：类前面加上abstract修饰，
*
* 抽象方法：abstract修饰 ，去掉大括号，直接分号结束
* 注意：
*   1，抽象方法所在的类必须是抽象类
*   2，不能直接创建（new）抽象类对象（抽象类无法直接实例化）
*   3，想使用抽象类必须用一个子类来继承抽象类，且覆盖重写抽象类中的所有抽象方法
* 覆盖重写（实现）：去掉方法的abstract关键字，然后补上方法体大括号
*
* 抽象类不能创建对象，如果创建，编译无法通过而报错，只能创建其非抽象类的对象
*   理解：假设创建了抽象类对象，调用抽象的方法，而抽象方法没有具体的方法体，没有意义
* 抽象类中，可以有构造方法，是供子类创建对象时，初始化父类成员使用的
*   理解：子类的构造方法中，有迷人的super()，需要访问父类的构造方法
* 抽象类中，不一定包含抽象方法，但是有抽象方法的类必须是抽象类
*   理解：为包含抽象方法的抽象类，目的就是不想让调用者创建该类对象，通常用于某些特殊的类结构设计
* 抽象类的子类，必须覆盖重写抽象父类中所有的抽象方法，否则，编译器无法通过而报错，除非该子类也是抽象类
*   理解：假设不重写所有的抽象方法，则类中可能包含抽象方法，那么创建对象后，调用抽象方法将没有意义
*
* */
public abstract class Abstract_Animal {     //抽象类

    public void Method(){   //普通方法

    }
    public abstract void eat(); //抽象方法

    public abstract void call(); //抽象方法

}
